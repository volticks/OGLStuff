-- Shader.cpp

/*template<>
bool setUniformVarImpl<int>(std::vector<int> const& args, uint32_t loc) {
	switch (args.size()) {
	case 0: // some moron (me probably) passed a 0 length vec
		return false;
	case 1:
		glUniform1iv(loc, args.size(), );
		break;
	case 2:
		glUniform2i(loc, args.at(0), args.at(1));
		break;
	case 3:
		glUniform3i(loc, args.at(0), args.at(1), args.at(2));
		break;
	case 4:
		glUniform4i(loc, args.at(0), args.at(1), args.at(2), args.at(3));
		break;
	default:
		// more than 4
		glUniform
	}
	return true;
}*/

-- GLStuff.cpp

//string loadShaderFromFile(char *fname) {
//  string shaderData = Util::getDataFromFile(fname);
//  return shaderData;
//}

////using SHADER_T = uint32_t;
//bool checkShaderErrors(SHADER_T shaderID) {
//  int success = 0;
//  char log[1024];
//
//  glGetShaderiv(shaderID, GL_COMPILE_STATUS, &success);
//
//  if (!success) {
//    glGetShaderInfoLog(shaderID, sizeof(log), NULL, log);
//    cerr << "Could not compile shader, log: " << log << endl;
//    return false;
//  }
//
//  return true;
//}
//
//SHADER_T compileShaderFromFile(const char *path, SHADER_T glShaderType) {
//  SHADER_T shaderID = glCreateShader(glShaderType);
//  string shaderSource = loadShaderFromFile((char *)path);
//  cout << "src:" << endl << shaderSource << endl;
//  const char *shaderSourceStr = shaderSource.c_str();
//
//  glShaderSource(shaderID, 1, &shaderSourceStr, NULL);
//
//  glCompileShader(shaderID);
//
//  return checkShaderErrors(shaderID) ? shaderID : SHADER_ERR;
//}
//
//SHADER_T compileShader(const char *const *shaderCode, SHADER_T glShaderType) {
//  SHADER_T shaderID = glCreateShader(glShaderType);
//  glShaderSource(shaderID, 1, shaderCode, NULL);
//  glCompileShader(shaderID);
//  return checkShaderErrors(shaderID) ? shaderID : SHADER_ERR;
//}
//
//SHADER_T *initShaders() {
//  SHADER_T *shaders = (SHADER_T *)malloc(SHADERS_ARR_SZ * sizeof(SHADER_T));
//
//  shaders[VERTSHADER_IDX] = compileShaderFromFile(
//      "C:/Users/volti/source/repos/GLStuff/GLStuff/res/shaders/vertshader.vert",
//      GL_VERTEX_SHADER);
//  shaders[FRAGSHADER_IDX] = compileShaderFromFile(
//      "C:/Users/volti/source/repos/GLStuff/GLStuff/res/shaders/fragshader.frag",
//      GL_FRAGMENT_SHADER);
//
//  // shaders[VERTSHADER_IDX] =
//  //     compileShader(&vertexShaderSource, GL_VERTEX_SHADER);
//  // shaders[FRAGSHADER_IDX] =
//  //     compileShader(&fragmentShaderSource, GL_FRAGMENT_SHADER);
//
//  for (int i = 0; i < SHADERS_ARR_SZ; i++)
//    if (shaders[i] == SHADER_ERR) {
//      shaders = NULL;
//      break;
//    }
//
//  return shaders;
//}
//void delShaders(SHADER_T *shaders) {
//  for (int i = 0; i < SHADERS_ARR_SZ; i++)
//    glDeleteShader(shaders[i]);
//}
//
//
//bool checkShaderLinkErrors(SHADERPROG_T progID) {
//  int success = 0;
//  char log[1024];
//
//  glGetProgramiv(progID, GL_LINK_STATUS, &success);
//
//  if (!success) {
//    glGetShaderInfoLog(progID, sizeof(log), NULL, log);
//    cerr << "Could not link shaders, log: " << log << endl;
//    return false;
//  }
//
//  return true;
//}
//
//SHADERPROG_T initShaderProgram(SHADER_T *shaders) {
//  SHADERPROG_T progID = glCreateProgram();
//  if (progID == 0) {
//    cerr << "Failed to create shader prog" << endl;
//    return SHADER_ERR;
//  }
//
//  for (int i = 0; i < SHADERS_ARR_SZ; i++)
//    glAttachShader(progID, shaders[i]);
//
//  // Link attached shaders to program.
//  glLinkProgram(progID);
//  if (!checkShaderLinkErrors(progID))
//    progID = NULL;
//
//  return progID;
//}
//
//uint32_t setupVertShaderBuf() {
//  uint32_t vertBufID = 0, vertAttribObjectID = 0;
//  // float vertices[] = {-0.5f, -0.5f, 0.0f, 0.0f, 0.5f, 0.0f, 0.5f, -0.5f,
//  // 0.0f};
//  float vertices[] = {
//      -0.5f, -0.5f, 0.0f, // left
//      1.0f,  0.0f,  0.0f, // right
//      -0.5f, 0.5f,  0.0f  // top
//  };
//  // Wanna store all this stuff in a VAO so we dont have to re-do this process
//  // again. Generate VAO
//  glGenVertexArrays(1, &vertAttribObjectID);
//  // Generate buffer, assign ID
//  glGenBuffers(1, &vertBufID);
//  // Bind, all changes will now be stored in this VAO.
//  glBindVertexArray(vertAttribObjectID);
//
//  // Bind vertex array buffer to our new generated buffer
//  glBindBuffer(GL_ARRAY_BUFFER, vertBufID);
//  // Put our verices into the buffer
//  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
//  // Configure VAO so OpenGL can understand how our vertices are structured
//  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), NULL);
//  // Enable VAO for further use?
//  glEnableVertexAttribArray(0);
//
//  // Unbind buffer after use, gotta do this after glVertexAttribPointer since
//  // that will set this buffer as the VBO so we can unbind afterwards but not
//  // before. That was prolly what was causing my issues lmao.
//  glBindBuffer(GL_ARRAY_BUFFER, 0);
//
//  // Unbind any previously bound VAO's. Dont rlly need to do this since we didnt
//  // bind any.
//  glBindVertexArray(0);
//  return vertAttribObjectID;
//}
//


//// Test drawing func
//void drawTriangle(uint32_t progID, uint32_t VAO, uint32_t VBO, float *vertices,
//                  uint32_t vertLen) {
//  glBindVertexArray(VAO);
//  glBindBuffer(GL_ARRAY_BUFFER, VBO);
//  glBufferData(GL_ARRAY_BUFFER, vertLen, vertices,
//               GL_DYNAMIC_DRAW);
//  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, (vertLen / 3),
//                        NULL);
//  glEnableVertexAttribArray(0);
//
//  glUseProgram(progID);
//  glDrawArrays(GL_TRIANGLES, 0, 3);
//
//  glBindBuffer(GL_ARRAY_BUFFER, 0);
//  glBindVertexArray(0);
//}
//
//void drawRect(uint32_t progID, uint32_t VAO, uint32_t VBO, uint32_t EBO, float* vertices,
//    uint32_t vertLen, uint32_t *indices, uint32_t indiLen) {
//    
//    // First part is the same, VAO and VBO store attributes and vertexes
//    glBindVertexArray(VAO);
//    glBindBuffer(GL_ARRAY_BUFFER, VBO);
//    glBufferData(GL_ARRAY_BUFFER, vertLen, vertices, GL_DYNAMIC_DRAW);
//
//    // EBO will track which vertices openGL actually needs to draw by providing indexes into the vertices. 
//    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
//    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indiLen, indices, GL_DYNAMIC_DRAW);
//
//    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3*sizeof(float), NULL);
//    glEnableVertexAttribArray(0);
//
//    glUseProgram(progID);
//    // 6 because there are 6 indices provided, aka 2 triangles worth of vertices.
//    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
//
//    // unset
//    glBindBuffer(GL_ARRAY_BUFFER, 0);
//    glBindVertexArray(0);
//    // Never unbind EBO while VAO which contains it still exists, since it exists on the VAO
//    //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
//}
//
//void colourGradient(uint32_t progID) {
//    double time = glfwGetTime();
//    // Make me a sweet sinusoidal wave dood
//    double colourValue = sin(time);
//
//    uint32_t loc = glGetUniformLocation(progID, "ourColour");
//    glUniform4f(loc, 0.0, 0.0, colourValue, 1.0);
//
//}

------ in go3d
   /*glm::mat4 transformation(1.0f);
   // Only z is set, as such only z will be rotated around -- essentially means we will rotate the shape counter clockwise on the flat 2d plane.
   glm::vec3 z(1.0f, 1.0f, 0.0f);
   // Combine transformation with a rotation transform of 10degrees (converted to radians) around the z axis.
   transformation = glm::rotate(transformation, (float)glfwGetTime(), z);
   //glUniformMatrix4fv(glGetUniformLocation(q.getShader().getShaderProgID(), "transform"), 1, GL_FALSE, glm::value_ptr(transformation));
   */
   // Setup the matrices on the shape
   // (bind first lol)
   //s.getShader().use();
   //glUniformMatrix4fv(glGetUniformLocation(s.getShader().getShaderProgID(), "modelMat"), 1, GL_FALSE, glm::value_ptr(modelMat));
   //s.getShader().setUniformVar("modelMat", &modelMat);

    //lm::vec3 cameraPos = cubePositions[i] - glm::vec3(0.0f, 0.0f, sin(glfwGetTime()));
    /*float radius = 10.0f;
    float cX = sin(glfwGetTime()) * radius;
    float cZ = cos(glfwGetTime()) * radius;
    glm::vec3 cameraPos(cX, 0.0f, cZ);
    lookAt(glm::vec3(0,0,0), cameraPos, s);
    */

-- in Shapes.cpp

/*void Triangle::drawImpl() {
	uint32_t vlen = this->getVerts().getVertLen();
	float* verts = this->getVerts().getVerts();
	this->copyToBuffer(GL_ARRAY_BUFFER, verts, vlen);
	this->getVerts().deploy();

	if (this->isTextured) {
		// TODO do this somewhere that makes more sense (maybe texture class)
		// For the texture.
		glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, this->getVerts().getStride(), (void*)(this->getVerts().getVertOff() + (3 * sizeof(float))));
		glEnableVertexAttribArray(2);
	}
	// Err checking
	Util::handleGLErrs();

	//std::cout << vlen << " " << getVao() << " " << getVbo() << " " << getProgID() << " " << getIsBound() << " " << getVerts().getStride() <<  std::endl;
	//getVerts().dump();
	//glUseProgram(this->getProgID());
	this->getShader().use();
	glDrawArrays(GL_TRIANGLES, 0, 3);
}*/


	/*uint32_t vlen = this->getVerts().getVertLen();
	float* verts = this->getVerts().getVerts();
	this->copyToBuffer(GL_ARRAY_BUFFER, verts, vlen);
	this->getVerts().deploy(this->isTextured);
	// Err checking
	Util::handleGLErrs();
	//std::cout << vlen << " " << getVao() << " " << getVbo() << " " << getProgID() << " " << getIsBound() << " " << getVerts().getStride() <<  std::endl;
	//getVerts().dump();
	//glUseProgram(this->getProgID());
	this->getShader().use();*/

	/*// If we can collide, and are colliding, handle it
	if (this->getCollidable() && this->getColliding()) {
		// dont move at all
		return;
	}*/

	/*switch (key) {
	case GLFW_KEY_UP:
		this->getVerts().move(this->getThresh(), Up);
		break;
	case GLFW_KEY_DOWN:
		this->getVerts().move(this->getThresh(), Down);
		break;
	case GLFW_KEY_LEFT:
		this->getVerts().move(this->getThresh(), Left);
		break;
	case GLFW_KEY_RIGHT:
		this->getVerts().move(this->getThresh(), Right);
		break;
	default:
		break;
	}*/

// Pos cuz i suck
/*void Triangle::drawTest() {
	uint32_t vertLen = this->getVerts().getVertLen();
	float* vertices = this->getVerts().getVerts();

	printf("0x%llx\n0x%llx\n", vertices, getVerts().getVerts());

	printf("0x%llx\n", getVerts().getVerts());

	glBindVertexArray(getVao());
	glBindBuffer(GL_ARRAY_BUFFER, getVbo());
	glBufferData(GL_ARRAY_BUFFER, vertLen, vertices,
		GL_DYNAMIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3*sizeof(float),
		NULL);
	glEnableVertexAttribArray(0);

	std::cout << vertLen << " " << getVao() << " " << getVbo() << " " << getProgID() << " " << getIsBound() << " " << getVerts().getStride() << std::endl;
	getVerts().dump();

	glUseProgram(getProgID());
	glDrawArrays(GL_TRIANGLES, 0, 3);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}*/

/*void Quad::drawImpl() {
	uint32_t vlen = this->getVerts().getVertLen();
	float* verts = this->getVerts().getVerts();
	this->copyToBuffer(GL_ARRAY_BUFFER, verts, vlen);
	// Remember to do this after we copy stuff into VBO otherwise problems yadda yadda 
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, this->getEboID());
	this->copyToBuffer(GL_ELEMENT_ARRAY_BUFFER, this->getIndices(), this->getIndiLen());
	this->getVerts().deploy();

	if (this->isTextured) {
		// TODO do this somewhere that makes more sense (maybe texture class)
		// For the texture.
		glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, this->getVerts().getStride(), (void*)(this->getVerts().getVertOff() + (3 * sizeof(float))));
		glEnableVertexAttribArray(2);
	}
	// Err checking
	Util::handleGLErrs();
	//glUseProgram(this->getProgID());
	this->getShader().use();
	glDrawElements(GL_TRIANGLES, this->getIndiLen() / sizeof(int), GL_UNSIGNED_INT, 0);
}*/
	/*
	this->getVerts().deploy(this->isTextured);

	// If textured, and we have textures, activate them now.
	if (this->isTextured && this->texes.size() > 0) {
		for (auto tex : this->texes) {
			tex->bind();
		}
	}

	// Err checking
	Util::handleGLErrs();
	//glUseProgram(this->getProgID());
	this->getShader().use();*/

/*Quad::Quad(uint32_t vaoID, uint32_t vboID, float* startingVert, uint32_t vertLen, Shader& prog, uint32_t stride, uint32_t vertOff, int* indices, uint32_t indiLen, uint32_t eboID, bool collidable, ShapeCollisionFuncT cFunc, bool isTextured, uint32_t texID) :
	Shape(vaoID, vboID, startingVert, vertLen, stride, vertOff, prog, collidable, cFunc, isTextured, texID) {
	this->indices = (int *)Util::allocAndCopyConts(indices, indiLen);
	this->indiLen = indiLen;
	this->indicesReset = false;
	this->eboID = eboID;
	this->initKeyMap();
}*/

	/*// If we can collide, and are colliding, handle it
	if (this->getCollidable() && this->getColliding()) {
		// dont move at all
		return;
	}*/

	/*switch (key) {
	case GLFW_KEY_UP:
		this->getVerts().move(this->getThresh(), Up);
		break;
	case GLFW_KEY_DOWN:
		this->getVerts().move(this->getThresh(), Down);
		break;
	case GLFW_KEY_LEFT:
		this->getVerts().move(this->getThresh(), Left);
		break;
	case GLFW_KEY_RIGHT:
		this->getVerts().move(this->getThresh(), Right);
		break;
	default:
		break;
	}*/

	// use modulus so we dont accidentally go oob
	/*if ((thisVerts[(VertPoint::RIGHT + VertPlane::X) % thisVSize] > vVerts[(VertPoint::LEFT + VertPlane::X) % vSize] &&
		thisVerts[(VertPoint::LEFT + VertPlane::X) % thisVSize] < vVerts[(VertPoint::RIGHT + VertPlane::X) % vSize]) &&
		(thisVerts[(VertPoint::TOP + VertPlane::Y) % thisVSize] > vVerts[(VertPoint::LEFT + VertPlane::Y) % vSize] &&
		thisVerts[(VertPoint::LEFT + VertPlane::Y) % thisVSize] < vVerts[(VertPoint::TOP + VertPlane::Y) % vSize])) {
		std::cout << "Lol X+Y" << std::endl;
		return true;
	}*/
	// TODO, replace the constants here since they arent always gonna be the same

	/*std::cout << "Test:" << std::endl;
	std::cout << vVerts[VertPoint::LEFT + VertPlane::Y] << std::endl;
	std::cout << vVerts[v.getLeftY()] << std::endl;
	// the triangle detection stuff is so WIP and i rlly dont care enough to do anything with it rn.
	std::cout << "Lol X+Y" << std::endl;*/

	

	// We know the shapes overlap as if they were squares, now find a way to check the
	// triangle sides.
	//
	// TODO: This works for the bottom left corner of our quad.... Now make it work for the other shit
	/*float yDiff = vVerts[(VertPoint::RIGHT + VertPlane::Y)] - vVerts[(VertPoint::LEFT + VertPlane::Y)];
	std::cout << "Y diff: " << yDiff << std::endl;

	float bottomLeftCornerY = thisVerts[(this->getLeftY()) % thisVSize];
	float bottomLeftCornerX = thisVerts[(this->getLeftX()) % thisVSize];
	
	float vLeftX = vVerts[(VertPoint::LEFT + VertPlane::X)];
	float vRightX = vVerts[(VertPoint::RIGHT + VertPlane::X)];
	float vLeftY = vVerts[(VertPoint::LEFT + VertPlane::Y)];
	float vRightY = vVerts[(VertPoint::RIGHT + VertPlane::Y)];

	float xDiffTotal = vLeftX - vRightX;
	std::cout << "X diff: " << xDiffTotal << std::endl;
	// How far along the X axis owned by our triangle is the bottom left corner?
	float alongVal = vLeftX - bottomLeftCornerX;
	std::cout << "Along: " << alongVal << std::endl;
	// How far up/down the Y axis owned by our triangle is the bottom left corner?
	float down = bottomLeftCornerY + vLeftY;
	std::cout << "Down: " << down << std::endl;
	
	//std::cout << vLeftY << std::endl;
	float per = fabs(xDiffTotal) / 100;
	per = fabs(alongVal) / per;
	std::cout << "Along X %: " << per << std::endl;

	float fullDown = vLeftY - vRightY;
	float per1 = fullDown / 100;
	per1 = per1 * per;
	std::cout << "Along Y %: " << per1 << std::endl;

	if (down < per1) {
		return true;
	}

	return false;*/

		/*std::cout << "-----------" << std::endl;
		std::cout << "minX: " << minX << std::endl;
		std::cout << "maxX: " << maxX << std::endl;
		std::cout << "minY: " << minY << std::endl;
		std::cout << "maxY: " << maxY << std::endl;*/
		//std::cout << "xd" << std::endl;



------ in renderLoop

  // Make 2 different shaders cuz we wanna change the colour a bit.
  //SHADER_T *shaders = initShaders();
  //if (shaders == NULL) {
  //  cerr << "Failed to create shader(s)" << endl;
  //  return;
  //}
  // Setup program
  //SHADERPROG_T progID = initShaderProgram(shaders);
  // Setup different program with diff frag shader (just testing)
  //shaders[FRAGSHADER_IDX] = compileShader(&fragmentShaderSource1, GL_FRAGMENT_SHADER);
  //if (shaders[FRAGSHADER_IDX] == SHADER_ERR) {
  //    cerr << "Failed to create new frag shader" << endl;
  //    return;
  //}
  //SHADERPROG_T prog2ID = initShaderProgram(shaders);

  ////glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eboID);

  //// Regardless of success or failure of program linking we need to delete the
  //// shader objects since we dont need them anymore
  //delShaders(shaders);
  //s.delShaders();
  //s1.delShaders();
  //if (progID == NULL) {
  //  cerr << "Failed to link program" << endl;
  //  return;
  //}


  // Zoomed in, see tex coords
  /*float rectVertices2[] = {
      // Coords             Colours              Tex coords
      0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,    0.5f, 0.5f, // top right
      0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,    0.5f, 0.5f,  // bottom right
     -0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,    0.5f, 0.5f,  // bottom left
     -0.5f,  0.5f, 0.0f,   0.0f, 1.0f, 0.0f,    0.5f, 0.5f,// top left 
  };*/

  /*unsigned int indices[] = {  // note that we start from 0!
      0, 1, 3,   // first triangle
      1, 2, 3    // second triangle
  };*/


  // Class bs to test
  //Verts vert(vertices, sizeof(vertices));
  //Triangle t(vaoID, vboID, (float*)vertices, sizeof(vertices), progID, sizeof(vertices) / 3);

  //uint32_t texID = makeTex("C:\\Users\\volti\\Pictures\\bap.jpg");

  //Triangle t(vaoID, vboID, (float*)vertices, sizeof(vertices), 3*sizeof(float), 0, s, true);
  //Triangle t1(vaoID, vboID, (float*)colourVertices, sizeof(colourVertices), 6 * sizeof(float), 3 * sizeof(float), s1, true, t1ColFunc);

  //Quad q(vaoID, vboID, (float*)rectVertices, sizeof(rectVertices), s, 3 * sizeof(float), 0, (int*)indices, sizeof(indices), eboID, true);
  //Quad q(vaoID, vboID, (float*)rectVertices2, sizeof(rectVertices2), s, 8 * sizeof(float), 3 * sizeof(float), (int*)indices, sizeof(indices), eboID, true, t1ColFunc, true, texID);
  //Quad q(qVaoID, qVboID, (float*)rectVertices2, sizeof(rectVertices2), s, qVas, (int*)indices, sizeof(indices), qEboID, true, t1ColFunc, true, t.getId());

  //t.setThresh(0.1f);
  //q.getVerts().move(0.25f, Left);

  //glm::mat4 wallModel = glm::rotate(id, glm::radians(180.0f), xAxis);
  //w.getShader().setUniformVar("modelMat", glm::value_ptr(wallModel));

    //// Now render the shapes.
    //drawTriangle(progID, vaoID, vboID, vertices, sizeof(vertices));
    //vertices[0] += 0.1f;
    //drawTriangle(progID, vaoID, vboID, vertices, sizeof(vertices));
    //drawRect(prog2ID, vaoID, vboID, eboID, rectVertices, sizeof(rectVertices), indices, sizeof(indices));
    //t.drawTest(/*progID, vaoID, vboID, vertices, sizeof(vertices)*/);

    // Shitty way of changing colour
    /*if (q.collidesWith(t1)) {
        //t1.setProgID(prog2ID);
        t1.getShader().setShaderProgID(prog2ID);
        //colourGradient(prog2ID);
    }
    else {
        //t1.setProgID(progID);
        t1.getShader().setShaderProgID(progID);
        //t1.getShader().setUniformVar("ourColour", new vector<float>{ 1.1,2.2,3.3,(float)glfwGetTime()});
        //colourGradient(progID);
    }*/

    // Now combine with a down scale of 1/10th on all axis.
    //transformation = glm::scale(transformation, glm::vec3(0.5f, 0.5f, 0.5f));
    //std::vector<float*> args{ (float *)1, (float *)GL_FALSE, (float*)glm::value_ptr(transformation) };
    //q.getShader().setUniformVar("transform", args);

    // This is quite annoying, since each shape has its own shader, we have to call this for each, otherwise one shader wont 
    // have a view matrix and it will cause the gl_Position calculation in the vertex shader to fail.
    //lookAt(glm::vec3(0, 0, 0), cameraPos, t1);
    //lookAt(glm::vec3(0, 0, 0), cameraPos, q);
    //camera.move(CameraDirection::BACK);

    //wm1 = glm::rotate(wallModel, glm::radians((float)glfwGetTime()), xAxis);
    //wm1 = glm::rotate(wm1, glm::radians((float)glfwGetTime()), yAxis);
    //w.modelMat = wm1;
    //w.findBB(t2, t3);
    /*wallModel = glm::scale(wallModel, glm::vec3(2.0f, 2.0f, 2.0f));
    q1.modelMat = wallModel;
    q1.findBB(t2, t3);
    wallModel = glm::rotate(wallModel, glm::radians((float)glfwGetTime()), xAxis);
    q1.modelMat = wallModel;
    q1.findBB(t2, t3);
    // Wanna rotate this a lil bit too.
    q1.modelMat = wallModel;*/

    // Need to set a transform for the triangle too otherwise we multiply the position by a null transformation vec in the shader lmao, so just use identity for now
    // to keep things as is.
    transformation = glm::mat4(1.0f);
    // [-] For some reason this doesnt blend well with our vert movement whatsoever lmao.
    // sin will lock the value between 0 and 1 but still allow it to change, allows shape to change shape
    transformation = glm::scale(transformation, glm::vec3(sin(glfwGetTime())));
    transformation = glm::translate(transformation, glm::vec3(-0.5, 0.5, 0.0));
    //t1.getShader().use();
    //glUniformMatrix4fv(glGetUniformLocation(t1.getShader().getShaderProgID(), "transform"), 1, GL_FALSE, glm::value_ptr(transformation));
    //t1.draw();

    //q.getShader().use();
    //glUniformMatrix4fv(glGetUniformLocation(q.getShader().getShaderProgID(), "projMat"), 1, GL_FALSE, glm::value_ptr(projectionMat));
    //glUniformMatrix4fv(glGetUniformLocation(q.getShader().getShaderProgID(), "viewMat"), 1, GL_FALSE, glm::value_ptr(viewMat));
    //q.getShader().setUniformVar("viewMat", &viewMat);

    //t1.getShader().use();
    //glUniformMatrix4fv(glGetUniformLocation(t1.getShader().getShaderProgID(), "projMat"), 1, GL_FALSE, glm::value_ptr(projectionMat));
    //glUniformMatrix4fv(glGetUniformLocation(t1.getShader().getShaderProgID(), "viewMat"), 1, GL_FALSE, glm::value_ptr(viewMat));
    //t1.getShader().setUniformVar("viewMat", &viewMat);

    // Selecting GL_TRUE here will transpose the matrix, rotating our shape clockwise instead of counter clockwise - since transposing will effectively do the same thing just reversed 
    // (as in, rows and columns reversed as well as the action itself)
    //glUniformMatrix4fv(glGetUniformLocation(q.getShader().getShaderProgID(), "transform"), 1, GL_FALSE, glm::value_ptr(transformation));
    //go3d(q);
    //q.draw();